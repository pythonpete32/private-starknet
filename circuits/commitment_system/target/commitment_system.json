{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":13957212201663075385,"abi":{"parameters":[{"name":"merkle_root","type":{"kind":"field"},"visibility":"public"},{"name":"nullifier_alice","type":{"kind":"field"},"visibility":"public"},{"name":"commitment_alice_new","type":{"kind":"field"},"visibility":"public"},{"name":"commitment_bob_new","type":{"kind":"field"},"visibility":"public"},{"name":"asset_id","type":{"kind":"field"},"visibility":"public"},{"name":"value_alice_old","type":{"kind":"field"},"visibility":"private"},{"name":"value_alice_new","type":{"kind":"field"},"visibility":"private"},{"name":"value_bob_received","type":{"kind":"field"},"visibility":"private"},{"name":"nonce_alice_old","type":{"kind":"field"},"visibility":"private"},{"name":"nonce_alice_new","type":{"kind":"field"},"visibility":"private"},{"name":"alice_secret_key","type":{"kind":"field"},"visibility":"private"},{"name":"alice_old_commitment_id","type":{"kind":"field"},"visibility":"private"},{"name":"merkle_path","type":{"kind":"array","length":20,"type":{"kind":"field"}},"visibility":"private"},{"name":"merkle_indices","type":{"kind":"array","length":20,"type":{"kind":"boolean"}},"visibility":"private"}],"return_type":null,"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"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","file_map":{"17":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"20":{"source":"pub mod poseidon;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\nuse crate::uint128::U128;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0]\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n","path":"std/hash/mod.nr"},"61":{"source":"use std::hash::pedersen_hash;\n\n// COMMITMENT STRUCTURE\n// Think of this like a \"private balance record\"\n// It contains:\n// - hash: The public identifier (what everyone sees on-chain)\n// - value: The actual balance (kept secret)\n// - nonce: Random number to hide the balance (kept secret)\nstruct Commitment {\n    hash: Field,\n    value: Field,\n    nonce: Field,\n    asset_id: Field,\n}\n\nimpl Commitment {\n    // Creates a new commitment\n    // This is like creating a \"sealed envelope\" with your balance inside\n    fn new(value: Field, nonce: Field, asset_id: Field) -> Self {\n        Self {\n            // The hash is what gets published on-chain\n            // Nobody can reverse this to find your balance!\n            hash: pedersen_hash([value, nonce, asset_id]),\n            value,\n            nonce,\n            asset_id,\n        }\n    }\n    \n    // Verify that the commitment data matches the hash\n    // This proves you know the secret values inside the commitment\n    fn verify(self) -> bool {\n        self.hash == pedersen_hash([self.value, self.nonce, self.asset_id])\n    }\n}\n\n// NULLIFIER STRUCTURE\n// Think of this like a \"burn receipt\" or \"spend proof\"\n// Once a nullifier is used, that commitment can never be spent again\nstruct Nullifier {\n    hash: Field,\n    secret_key: Field,\n    commitment_id: Field,  // Changed from asset_id for clarity\n}\n\nimpl Nullifier {\n    // Creates a nullifier for spending a commitment\n    // Only the owner (who knows secret_key) can create this\n    fn new(secret_key: Field, commitment_id: Field) -> Self {\n        Self {\n            // This hash is what prevents double-spending\n            // Same commitment always produces same nullifier\n            hash: pedersen_hash([secret_key, commitment_id]),\n            secret_key,\n            commitment_id,\n        }\n    }\n    \n    // Verify the nullifier is correctly formed\n    fn verify(self) -> bool {\n        self.hash == pedersen_hash([self.secret_key, self.commitment_id])\n    }\n}\n\n// MERKLE TREE VERIFICATION\n// Proves that a commitment exists in the global state tree\nfn verify_merkle_proof(\n    commitment: Field,\n    merkle_root: Field,\n    merkle_path: [Field; 20],\n    merkle_indices: [bool; 20]\n) -> bool {\n    let mut current_hash = commitment;\n    \n    // Walk up the tree from leaf to root\n    for i in 0..20 {\n        let sibling = merkle_path[i];\n        let is_left = merkle_indices[i];\n        \n        // Skip if sibling is zero (indicates empty path)\n        if sibling != 0 {\n            if is_left {\n                // Current node is left child\n                current_hash = pedersen_hash([current_hash, sibling]);\n            } else {\n                // Current node is right child\n                current_hash = pedersen_hash([sibling, current_hash]);\n            }\n        }\n    }\n    \n    current_hash == merkle_root\n}\n\n// MAIN TRANSFER CIRCUIT\n// This is the core logic that gets turned into a zero-knowledge proof\n// Think of it like the rules that MUST be satisfied for a valid transfer\nfn main(\n    // ===== PUBLIC INPUTS =====\n    // These are visible to everyone on-chain\n    \n    // Current Merkle tree root (proves global state)\n    merkle_root: pub Field,\n    \n    // The nullifier that \"burns\" Alice's old balance\n    // This prevents Alice from spending the same balance twice\n    nullifier_alice: pub Field,\n    \n    // Alice's new commitment (her remaining balance after transfer)\n    commitment_alice_new: pub Field,\n    \n    // Bob's new commitment (the amount he receives) - PROVIDED BY BOB\n    commitment_bob_new: pub Field,\n    \n    // The token type being transferred (like USDC address in Solidity)\n    asset_id: pub Field,\n    \n    // ===== PRIVATE INPUTS =====\n    // These stay secret! Only the prover (Alice) knows these\n    \n    // Alice's old balance (before transfer)\n    value_alice_old: Field,\n    \n    // Alice's new balance (after transfer)\n    value_alice_new: Field,\n    \n    // Bob's received amount (Alice knows this but NOT Bob's nonce)\n    value_bob_received: Field,\n    \n    // Random values to hide the balances\n    nonce_alice_old: Field,\n    nonce_alice_new: Field,\n    // NOTE: nonce_bob removed - Bob keeps this secret!\n    \n    // Alice's secret key (like a private key)\n    // This proves Alice owns the commitment she's spending\n    alice_secret_key: Field,\n    \n    // The ID of Alice's old commitment (what she's spending)\n    alice_old_commitment_id: Field,\n    \n    // Merkle proof that Alice's old commitment exists in the tree\n    merkle_path: [Field; 20],\n    merkle_indices: [bool; 20],\n) {\n    // ===== CONSTRAINT 1: Verify Alice's commitment exists in global state =====\n    // Create Alice's old commitment from her secrets\n    let alice_old_commitment = Commitment::new(value_alice_old, nonce_alice_old, asset_id);\n    assert(alice_old_commitment.verify());\n    \n    // Prove this commitment exists in the Merkle tree\n    // This prevents Alice from claiming fake balances!\n    assert(verify_merkle_proof(\n        alice_old_commitment.hash,\n        merkle_root,\n        merkle_path,\n        merkle_indices\n    ));\n    \n    // ===== CONSTRAINT 2: Verify Alice owns what she's spending =====\n    // Create the nullifier using Alice's secret\n    let nullifier = Nullifier::new(alice_secret_key, alice_old_commitment_id);\n    \n    // The nullifier hash MUST match what was provided publicly\n    // This proves Alice knows the secret key for this commitment\n    assert(nullifier_alice == nullifier.hash);\n    assert(nullifier.verify());\n    \n    // ===== CONSTRAINT 3: Verify Alice's new balance commitment =====\n    // Create Alice's new commitment\n    let alice_new_commitment = Commitment::new(value_alice_new, nonce_alice_new, asset_id);\n    \n    // Must match the public commitment\n    // This ensures Alice can later spend her new balance\n    assert(commitment_alice_new == alice_new_commitment.hash);\n    assert(alice_new_commitment.verify());\n    \n    // ===== CONSTRAINT 4: Bob's commitment is provided by Bob =====\n    // Bob creates his own commitment with his own secret nonce\n    // Alice cannot create or verify Bob's commitment - she only knows the amount\n    // This prevents Alice from later spending Bob's tokens\n    // \n    // NOTE: commitment_bob_new is intentionally not verified here by design!\n    // It's provided as a public input but Alice's circuit doesn't verify it.\n    // Bob will verify his own commitment when he later spends it.\n    // We acknowledge its existence to satisfy the compiler:\n    let _ = commitment_bob_new;\n    \n    // ===== CONSTRAINT 5: Conservation of value (NO TOKENS CREATED/DESTROYED) =====\n    // This is CRITICAL! Ensures no inflation/deflation\n    // Old balance MUST equal new balance + transferred amount\n    assert(value_alice_old == value_alice_new + value_bob_received);\n    \n    // NOTE: Alice's old commitment verification moved to CONSTRAINT 1\n    // (Combined with Merkle tree verification)\n    \n    // ===== CONSTRAINT 6: Reasonable value checks =====\n    // Prevent overflow attacks and ensure positive balances\n    assert(value_alice_old as u32 < 1000000);\n    assert(value_alice_new as u32 < 1000000);\n    assert(value_bob_received as u32 < 1000000);\n    \n    // No negative balances allowed!\n    assert(value_bob_received as u32 > 0);\n    \n    // ===== CONSTRAINT 7: Asset consistency =====\n    // Ensure we're transferring the same asset type throughout\n    // This prevents mixing different tokens in a single transfer\n    assert(alice_new_commitment.asset_id == asset_id);\n    assert(alice_old_commitment.asset_id == asset_id);\n    // Note: Bob's commitment asset_id is verified by Bob when he creates it\n}\n\n// ===== TEST FUNCTIONS =====\n\n#[test]\nfn test_commitment_basics() {\n    // Test that commitments work as expected\n    let value = 100;\n    let nonce = 12345;\n    \n    // Create a commitment\n    let asset_id = 1; // Test asset\n    let commitment1 = Commitment::new(value, nonce, asset_id);\n    \n    // Same inputs should always produce same hash (deterministic)\n    let commitment2 = Commitment::new(value, nonce, asset_id);\n    assert(commitment1.hash == commitment2.hash);\n    \n    // Different nonce should produce different hash\n    let commitment3 = Commitment::new(value, 54321, asset_id);\n    assert(commitment1.hash != commitment3.hash);\n    \n    // Commitment should verify correctly\n    assert(commitment1.verify());\n}\n\n#[test]\nfn test_nullifier_basics() {\n    // Test nullifier generation\n    let secret_key = 99999;\n    let commitment_id = 42;\n    \n    // Create nullifier\n    let nullifier1 = Nullifier::new(secret_key, commitment_id);\n    \n    // Same inputs produce same nullifier (prevents double-spend)\n    let nullifier2 = Nullifier::new(secret_key, commitment_id);\n    assert(nullifier1.hash == nullifier2.hash);\n    \n    // Different secret produces different nullifier\n    let nullifier3 = Nullifier::new(11111, commitment_id);\n    assert(nullifier1.hash != nullifier3.hash);\n    \n    // Nullifier should verify\n    assert(nullifier1.verify());\n}\n\n#[test]\nfn test_merkle_verification() {\n    // Test the Merkle tree verification function\n    let test_commitment = 0x1234567890ABCDEF;\n    \n    // Test case 1: Single node tree (commitment is root)\n    let merkle_root = test_commitment;\n    let merkle_path: [Field; 20] = [0; 20]; // All zeros for single node\n    let merkle_indices: [bool; 20] = [false; 20]; // All false for root\n    \n    // Should verify successfully\n    assert(verify_merkle_proof(test_commitment, merkle_root, merkle_path, merkle_indices));\n    \n    // Test case 2: Wrong commitment should fail\n    let wrong_commitment = 0xDEADBEEF;\n    assert(!verify_merkle_proof(wrong_commitment, merkle_root, merkle_path, merkle_indices));\n}\n\n#[test]\nfn test_complete_private_transfer() {\n    // ===== SETUP: Alice has 100 tokens, wants to send 30 to Bob =====\n    \n    // Initial state\n    let value_alice_old = 100;  // Alice starts with 100\n    let value_alice_new = 70;   // Alice will have 70 after\n    let value_bob_received = 30; // Bob receives 30\n    \n    // Random nonces (in practice, these would be generated securely)\n    let nonce_alice_old = 111111;\n    let nonce_alice_new = 222222;\n    let nonce_bob = 333333;  // BOB GENERATES THIS SECRETLY\n    \n    // Alice's secret key (like her private key)\n    let alice_secret_key = 0xABCDEF;\n    \n    // Asset being transferred (could be USDC address)\n    let asset_id = 0x1234567890;\n    \n    // Alice's old commitment ID (in practice, this would be from the blockchain)\n    let alice_old_commitment_id = 0x9876543210;\n    \n    // ===== MERKLE TREE SETUP =====\n    // Create Alice's old commitment\n    let alice_old_commitment = Commitment::new(value_alice_old, nonce_alice_old, asset_id);\n    \n    // Create a simple test Merkle tree with Alice's commitment at index 0\n    // For simplicity, we'll create a minimal tree with Alice's commitment as the root\n    let merkle_root = alice_old_commitment.hash; // Simplified: commitment is the root\n    let merkle_path: [Field; 20] = [0; 20]; // All zeros for a single-node tree\n    let merkle_indices: [bool; 20] = [false; 20]; // All false for root verification\n    \n    // ===== INTERACTIVE PROTOCOL =====\n    // 1. Alice tells Bob she wants to send him 30 tokens\n    // 2. Bob creates his own commitment with his secret nonce\n    // 3. Bob sends commitment hash to Alice (keeps nonce secret!)\n    // 4. Alice creates proof using Bob's commitment hash\n    \n    // BOB'S SIDE: Create commitment with secret nonce\n    let bob_commitment = Commitment::new(value_bob_received, nonce_bob, asset_id);\n    // Bob sends bob_commitment.hash to Alice, keeps nonce_bob secret\n    \n    // ALICE'S SIDE: Create her new commitment\n    let alice_new_commitment = Commitment::new(value_alice_new, nonce_alice_new, asset_id);\n    \n    // Create the nullifier (burns Alice's old balance)\n    let nullifier = Nullifier::new(alice_secret_key, alice_old_commitment_id);\n    \n    // ===== RUN THE TRANSFER (generate the proof) =====\n    // Alice can prove the transfer with Merkle verification!\n    main(\n        merkle_root,                // Public: Current tree state\n        nullifier.hash,            // Public: Nullifier for Alice's old balance\n        alice_new_commitment.hash,  // Public: Alice's new balance commitment\n        bob_commitment.hash,        // Public: Bob's commitment (provided by Bob)\n        asset_id,                  // Public: Which token is being transferred\n        value_alice_old,           // Private: Alice's old balance\n        value_alice_new,           // Private: Alice's new balance\n        value_bob_received,        // Private: Bob's received amount (known to both)\n        nonce_alice_old,          // Private: Old nonce\n        nonce_alice_new,          // Private: New nonce for Alice\n        alice_secret_key,         // Private: Alice's secret\n        alice_old_commitment_id,   // Private: Which commitment Alice is spending\n        merkle_path,              // Private: Merkle proof path\n        merkle_indices            // Private: Merkle proof directions\n        // NOTE: nonce_bob is NOT provided to Alice - Bob keeps it secret!\n    );\n}\n\n#[test(should_fail)]\nfn test_invalid_transfer_conservation() {\n    // This test SHOULD FAIL because it tries to create tokens out of thin air\n    // 80 + 30 = 110, but Alice only had 100!\n    \n    let value_alice_old = 100;\n    let value_alice_new = 80;    // Alice keeps 80\n    let value_bob_received = 30;  // Bob gets 30\n    \n    let nonce_alice_old = 111;\n    let nonce_alice_new = 222;\n    let nonce_bob = 333;  // Bob's secret nonce\n    let alice_secret_key = 12345;\n    let asset_id = 1;\n    let alice_old_commitment_id = 999;\n    \n    // Setup Merkle tree with Alice's commitment\n    let alice_old_commitment = Commitment::new(value_alice_old, nonce_alice_old, asset_id);\n    let merkle_root = alice_old_commitment.hash;\n    let merkle_path: [Field; 20] = [0; 20];\n    let merkle_indices: [bool; 20] = [false; 20];\n    \n    let alice_new_commitment = Commitment::new(value_alice_new, nonce_alice_new, asset_id);\n    let bob_commitment = Commitment::new(value_bob_received, nonce_bob, asset_id);\n    let nullifier = Nullifier::new(alice_secret_key, alice_old_commitment_id);\n    \n    // This will fail the conservation check: value_alice_old != value_alice_new + value_bob_received\n    main(\n        merkle_root,               // Public: Tree root\n        nullifier.hash,           // Public: Nullifier\n        alice_new_commitment.hash, // Public: Alice's new commitment\n        bob_commitment.hash,       // Public: Bob's commitment\n        asset_id,                 // Public: Asset ID\n        value_alice_old,          // Private: Alice's old balance\n        value_alice_new,          // Private: Alice's new balance (wrong!)\n        value_bob_received,       // Private: Transfer amount\n        nonce_alice_old,         // Private: Old nonce\n        nonce_alice_new,         // Private: New nonce\n        alice_secret_key,        // Private: Secret key\n        alice_old_commitment_id, // Private: Commitment ID\n        merkle_path,             // Private: Merkle path\n        merkle_indices           // Private: Merkle indices\n    );\n}\n\n#[test(should_fail)]\nfn test_zero_value_transfer() {\n    // This test SHOULD FAIL because we require positive transfer amounts\n    \n    let value_alice_old = 100;\n    let value_alice_new = 100;   // Alice keeps everything\n    let value_bob_received = 0;   // Bob gets nothing - this should fail\n    \n    let nonce_alice_old = 111;\n    let nonce_alice_new = 222;\n    let nonce_bob = 333;  // Bob's secret nonce\n    let alice_secret_key = 12345;\n    let asset_id = 1;\n    let alice_old_commitment_id = 999;\n    \n    // Setup Merkle tree with Alice's commitment\n    let alice_old_commitment = Commitment::new(value_alice_old, nonce_alice_old, asset_id);\n    let merkle_root = alice_old_commitment.hash;\n    let merkle_path: [Field; 20] = [0; 20];\n    let merkle_indices: [bool; 20] = [false; 20];\n    \n    let alice_new_commitment = Commitment::new(value_alice_new, nonce_alice_new, asset_id);\n    let bob_commitment = Commitment::new(value_bob_received, nonce_bob, asset_id);\n    let nullifier = Nullifier::new(alice_secret_key, alice_old_commitment_id);\n    \n    // This will fail the positive value check: assert(value_bob_received as u32 > 0)\n    main(\n        merkle_root,               // Public: Tree root\n        nullifier.hash,           // Public: Nullifier\n        alice_new_commitment.hash, // Public: Alice's new commitment\n        bob_commitment.hash,       // Public: Bob's commitment\n        asset_id,                 // Public: Asset ID\n        value_alice_old,          // Private: Alice's old balance\n        value_alice_new,          // Private: Alice's new balance\n        value_bob_received,       // Private: Transfer amount (0 - should fail!)\n        nonce_alice_old,         // Private: Old nonce\n        nonce_alice_new,         // Private: New nonce\n        alice_secret_key,        // Private: Secret key\n        alice_old_commitment_id, // Private: Commitment ID\n        merkle_path,             // Private: Merkle path\n        merkle_indices           // Private: Merkle indices\n    );\n}\n\n// ===== ABOUT THE PRIVATE COMMUNICATION PROBLEM - SOLVED! =====\n// \n// Problem: \"How does Alice send to Bob privately? Can't she spend his funds?\"\n// \n// SOLUTION IMPLEMENTED: Interactive Transfer Protocol\n//\n// 1. Alice tells Bob she wants to send him tokens\n// 2. Bob generates his own secret nonce\n// 3. Bob creates commitment = hash(amount, bob_secret_nonce, asset_id)\n// 4. Bob sends commitment hash to Alice (keeps nonce secret!)\n// 5. Alice creates ZK proof using Bob's commitment hash\n// 6. Alice publishes proof and Bob's commitment on-chain\n// 7. Bob can later spend using his secret nonce\n// 8. Alice CANNOT spend Bob's tokens because she doesn't know bob_secret_nonce!\n//\n// This circuit implements step 5: Alice proves she can transfer the amount\n// without needing to know Bob's secrets.\n//\n// Other solutions for non-interactive transfers:\n// - Stealth addresses (Bob's public key generates unique commitments)\n// - Encrypted notes (Alice encrypts details for Bob)\n// - Commitment derivation schemes (mathematical relationships)\n//\n// The interactive approach is the simplest and most secure for this use case.","path":"/Users/abuusama/Desktop/private-starknet/circuits/commitment_system/src/main.nr"}},"names":["main"],"brillig_names":["decompose_hint","directive_invert","directive_integer_quotient"]}