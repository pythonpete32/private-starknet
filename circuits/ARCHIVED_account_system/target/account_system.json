{"noir_version":"1.0.0-beta.6+e796dfd67726cbc28eb9991782533b211025928d","hash":"14836237499233324400","abi":{"parameters":[{"name":"merkle_root","type":{"kind":"field"},"visibility":"public"},{"name":"sender_nullifier","type":{"kind":"field"},"visibility":"public"},{"name":"sender_new_commitment","type":{"kind":"field"},"visibility":"public"},{"name":"recipient_new_commitment","type":{"kind":"field"},"visibility":"public"},{"name":"asset_id","type":{"kind":"field"},"visibility":"public"},{"name":"sender_account","type":{"kind":"struct","path":"Account","fields":[{"name":"pubkey","type":{"kind":"field"}},{"name":"balance","type":{"kind":"field"}},{"name":"nonce","type":{"kind":"field"}},{"name":"asset_id","type":{"kind":"field"}}]},"visibility":"private"},{"name":"sender_secret_key","type":{"kind":"field"},"visibility":"private"},{"name":"transfer_amount","type":{"kind":"field"},"visibility":"private"},{"name":"recipient_pubkey","type":{"kind":"field"},"visibility":"private"},{"name":"recipient_old_balance","type":{"kind":"field"},"visibility":"private"},{"name":"recipient_old_nonce","type":{"kind":"field"},"visibility":"private"},{"name":"sender_new_account","type":{"kind":"struct","path":"Account","fields":[{"name":"pubkey","type":{"kind":"field"}},{"name":"balance","type":{"kind":"field"}},{"name":"nonce","type":{"kind":"field"}},{"name":"asset_id","type":{"kind":"field"}}]},"visibility":"private"},{"name":"sender_merkle_path","type":{"kind":"array","length":20,"type":{"kind":"field"}},"visibility":"private"},{"name":"sender_merkle_indices","type":{"kind":"array","length":20,"type":{"kind":"field"}},"visibility":"private"}],"return_type":null,"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","file_map":{"17":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"19":{"source":"// Exposed only for usage in `std::meta`\npub(crate) mod poseidon2;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\n\n#[foreign(sha256_compression)]\n// docs:start:sha256_compression\npub fn sha256_compression(input: [u32; 16], state: [u32; 8]) -> [u32; 8] {}\n// docs:end:sha256_compression\n\n#[foreign(keccakf1600)]\n// docs:start:keccakf1600\npub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {}\n// docs:end:keccakf1600\n\npub mod keccak {\n    #[deprecated(\"This function has been moved to std::hash::keccakf1600\")]\n    pub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {\n        super::keccakf1600(input)\n    }\n}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0].x\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: TypeDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n","path":"std/hash/mod.nr"},"50":{"source":"use std::hash::pedersen_hash;\n\n// GLOBAL CONSTANTS\nglobal MERKLE_DEPTH: u32 = 20; // Support up to 2^20 = 1M+ accounts\n\n// ACCOUNT STRUCTURE\n// Represents a user's private account state\n// Unlike UTXOs, this is a persistent account that gets updated\nstruct Account {\n    pubkey: Field,      // User's public key (derived from secret)\n    balance: Field,     // Current token balance\n    nonce: Field,       // Prevents replay attacks and provides uniqueness\n    asset_id: Field,    // Which token this account holds\n}\n\nimpl Account {\n    // Create a new account\n    fn new(pubkey: Field, balance: Field, nonce: Field, asset_id: Field) -> Self {\n        Self { pubkey, balance, nonce, asset_id }\n    }\n\n    // Generate the account commitment hash for Merkle tree inclusion\n    // This is what gets stored in the global Merkle tree\n    fn commitment_hash(self) -> Field {\n        pedersen_hash([self.pubkey, self.balance, self.nonce, self.asset_id])\n    }\n\n    // Verify the account data is consistent\n    fn verify(self) -> bool {\n        // Ensure reasonable values\n        (self.balance as u64 < 1000000000) & // Max 1B tokens\n        (self.nonce as u64 < 1000000000) &   // Max 1B operations\n        (self.asset_id != 0)                 // Valid asset ID\n    }\n\n    // Create updated account after receiving tokens\n    fn receive(self, amount: Field) -> Self {\n        Self {\n            pubkey: self.pubkey,\n            balance: self.balance + amount,\n            nonce: self.nonce + 1,  // Increment nonce\n            asset_id: self.asset_id,\n        }\n    }\n\n    // Create updated account after sending tokens\n    fn send(self, amount: Field) -> Self {\n        Self {\n            pubkey: self.pubkey,\n            balance: self.balance - amount,\n            nonce: self.nonce + 1,  // Increment nonce\n            asset_id: self.asset_id,\n        }\n    }\n}\n\n// NULLIFIER STRUCTURE\n// Prevents double-spending by tracking used account states\nstruct Nullifier {\n    hash: Field,\n    account_commitment: Field,\n    secret_key: Field,\n}\n\nimpl Nullifier {\n    // Create nullifier for an account state\n    // Only the account owner can create this (needs secret_key)\n    fn new(account_commitment: Field, secret_key: Field) -> Self {\n        Self {\n            hash: pedersen_hash([account_commitment, secret_key]),\n            account_commitment,\n            secret_key,\n        }\n    }\n\n    // Verify nullifier is correctly formed\n    fn verify(self) -> bool {\n        self.hash == pedersen_hash([self.account_commitment, self.secret_key])\n    }\n}\n\n// MERKLE TREE VERIFICATION\n// Proves an account exists in the global account tree\n// Fixed version with proper left/right child handling\nfn verify_merkle_proof(\n    leaf: Field,\n    merkle_root: Field,\n    merkle_path: [Field; MERKLE_DEPTH],\n    merkle_indices: [Field; MERKLE_DEPTH], // 0 = left, 1 = right\n) -> bool {\n    let mut current_hash = leaf;\n\n    // Walk up the tree from leaf to root\n    for i in 0..MERKLE_DEPTH {\n        let i_u32 = i as u32;\n        let sibling = merkle_path[i_u32];\n        let direction = merkle_indices[i_u32];\n\n        // Skip if sibling is zero (empty/unused level)\n        if sibling != 0 {\n            if direction == 0 {\n                // Current node is left child, sibling is right\n                current_hash = pedersen_hash([current_hash, sibling]);\n            } else {\n                // Current node is right child, sibling is left\n                current_hash = pedersen_hash([sibling, current_hash]);\n            }\n        }\n    }\n\n    current_hash == merkle_root\n}\n\n// MAIN TRANSFER CIRCUIT\n// Account-based private transfer with interactive protocol\n// Ensures Alice cannot rug Bob by making Bob generate his own commitment\nfn main(\n    // ===== PUBLIC INPUTS =====\n    // Global state root\n    merkle_root: pub Field,\n    \n    // Nullifier to prevent double-spending sender's old state\n    sender_nullifier: pub Field,\n    \n    // New account commitments after transfer\n    sender_new_commitment: pub Field,\n    recipient_new_commitment: pub Field, // PROVIDED BY RECIPIENT!\n    \n    // Transfer details\n    asset_id: pub Field,\n    \n    // ===== PRIVATE INPUTS =====\n    // Sender's current account state\n    sender_account: Account,\n    sender_secret_key: Field,\n    \n    // Transfer amount\n    transfer_amount: Field,\n    \n    // Recipient's information (minimal knowledge)\n    recipient_pubkey: Field,\n    recipient_old_balance: Field,  // Alice knows this to verify Bob's new state\n    recipient_old_nonce: Field,    // Alice needs this to compute Bob's old commitment\n    \n    // Sender's new account after transfer\n    sender_new_account: Account,\n    \n    // Merkle proof for sender's current account\n    sender_merkle_path: [Field; MERKLE_DEPTH],\n    sender_merkle_indices: [Field; MERKLE_DEPTH],\n) {\n    // ===== CONSTRAINT 1: Verify sender's identity =====\n    // Ensure sender has the correct public key\n    let computed_pubkey = pedersen_hash([sender_secret_key]);\n    assert(sender_account.pubkey == computed_pubkey);\n\n    // ===== CONSTRAINT 2: Verify sender's account exists in global state =====\n    let sender_commitment = sender_account.commitment_hash();\n    assert(verify_merkle_proof(\n        sender_commitment,\n        merkle_root,\n        sender_merkle_path,\n        sender_merkle_indices,\n    ));\n\n    // ===== CONSTRAINT 3: Verify sender has sufficient balance =====\n    assert(sender_account.balance as u64 >= transfer_amount as u64);\n    assert(transfer_amount as u64 > 0); // No zero transfers\n\n    // ===== CONSTRAINT 4: Verify sender's account is valid =====\n    assert(sender_account.verify());\n    assert(sender_account.asset_id == asset_id);\n\n    // ===== CONSTRAINT 5: Generate nullifier to prevent double-spending =====\n    let nullifier = Nullifier::new(sender_commitment, sender_secret_key);\n    assert(sender_nullifier == nullifier.hash);\n    assert(nullifier.verify());\n\n    // ===== CONSTRAINT 6: Verify sender's new account state =====\n    let expected_sender_new = sender_account.send(transfer_amount);\n    assert(sender_new_account.pubkey == expected_sender_new.pubkey);\n    assert(sender_new_account.balance == expected_sender_new.balance);\n    assert(sender_new_account.nonce == expected_sender_new.nonce);\n    assert(sender_new_account.asset_id == expected_sender_new.asset_id);\n    \n    // Verify new account commitment\n    assert(sender_new_commitment == sender_new_account.commitment_hash());\n    assert(sender_new_account.verify());\n\n    // ===== CONSTRAINT 7: Interactive protocol for recipient =====\n    // SECURITY: Alice cannot generate recipient's commitment directly\n    // Instead, Bob provides his new commitment and Alice verifies it's reasonable\n    \n    // Recreate recipient's old account state (Alice needs to know this)\n    let recipient_old_account = Account::new(\n        recipient_pubkey,\n        recipient_old_balance,\n        recipient_old_nonce,\n        asset_id\n    );\n    \n    // Compute what recipient's new account SHOULD be\n    let expected_recipient_new = recipient_old_account.receive(transfer_amount);\n    let _expected_recipient_commitment = expected_recipient_new.commitment_hash();\n    \n    // CRITICAL: We DON'T enforce that recipient_new_commitment equals expected\n    // This is the KEY insight that prevents Alice from rugging Bob!\n    // Bob generates his own commitment with his own secret nonce\n    // Alice can only verify that it's \"reasonable\" given the transfer amount\n    \n    // We just acknowledge the recipient commitment exists\n    let _ = recipient_new_commitment;\n    \n    // Optional: Verify recipient pubkey is valid (not zero)\n    assert(recipient_pubkey != 0);\n    \n    // Optional: Basic sanity check on recipient's old state\n    assert(recipient_old_account.verify());\n    \n    // Note: The actual verification that recipient_new_commitment is correct\n    // happens when Bob later spends from his account - he proves he knows\n    // the values that hash to recipient_new_commitment\n\n    // ===== CONSTRAINT 8: Asset consistency =====\n    assert(sender_account.asset_id == asset_id);\n    assert(sender_new_account.asset_id == asset_id);\n    \n    // ===== CONSTRAINT 9: Value bounds checking =====\n    assert(transfer_amount as u64 < 1000000000); // Max 1B tokens per transfer\n    assert(sender_account.balance as u64 < 1000000000);\n    assert(sender_new_account.balance as u64 < 1000000000);\n}\n\n// ===== TEST FUNCTIONS =====\n\n#[test]\nfn test_account_basics() {\n    let secret_key = 12345;\n    let pubkey = pedersen_hash([secret_key]);\n    let balance = 1000;\n    let nonce = 0;\n    let asset_id = 1;\n\n    let account = Account::new(pubkey, balance, nonce, asset_id);\n    \n    // Basic verification\n    assert(account.verify());\n    assert(account.pubkey == pubkey);\n    assert(account.balance == balance);\n    assert(account.nonce == nonce);\n    \n    // Test send operation\n    let account_after_send = account.send(300);\n    assert(account_after_send.balance == 700);\n    assert(account_after_send.nonce == 1);\n    \n    // Test receive operation\n    let account_after_receive = account.receive(500);\n    assert(account_after_receive.balance == 1500);\n    assert(account_after_receive.nonce == 1);\n    \n    // Commitment hashes should be different after operations\n    assert(account.commitment_hash() != account_after_send.commitment_hash());\n    assert(account.commitment_hash() != account_after_receive.commitment_hash());\n}\n\n#[test]\nfn test_nullifier_basics() {\n    let secret_key = 99999;\n    let account_commitment = 0x123456789ABCDEF;\n\n    let nullifier1 = Nullifier::new(account_commitment, secret_key);\n    let nullifier2 = Nullifier::new(account_commitment, secret_key);\n    \n    // Same inputs produce same nullifier (deterministic)\n    assert(nullifier1.hash == nullifier2.hash);\n    assert(nullifier1.verify());\n    \n    // Different secret produces different nullifier\n    let nullifier3 = Nullifier::new(account_commitment, 11111);\n    assert(nullifier1.hash != nullifier3.hash);\n}\n\n#[test]\nfn test_merkle_verification() {\n    let test_commitment = 0x1234567890ABCDEF;\n\n    // Test case 1: Single node tree (commitment is root)\n    let merkle_root = test_commitment;\n    let merkle_path: [Field; MERKLE_DEPTH] = [0; MERKLE_DEPTH];\n    let merkle_indices: [Field; MERKLE_DEPTH] = [0; MERKLE_DEPTH]; // All left children\n    \n    assert(verify_merkle_proof(test_commitment, merkle_root, merkle_path, merkle_indices));\n    \n    // Test case 2: Wrong commitment should fail\n    let wrong_commitment = 0xDEADBEEF;\n    assert(!verify_merkle_proof(wrong_commitment, merkle_root, merkle_path, merkle_indices));\n    \n    // Test case 3: Test with actual tree structure\n    let leaf = 0x111;\n    let sibling = 0x222;\n    let parent = pedersen_hash([leaf, sibling]); // leaf is left child\n    \n    let mut path: [Field; MERKLE_DEPTH] = [0; MERKLE_DEPTH];\n    let mut indices: [Field; MERKLE_DEPTH] = [0; MERKLE_DEPTH];\n    path[0] = sibling;\n    indices[0] = 0; // left child\n    \n    assert(verify_merkle_proof(leaf, parent, path, indices));\n}\n\n#[test]\nfn test_complete_account_transfer() {\n    // ===== SETUP =====\n    // Alice has 1000 tokens, wants to send 300 to Bob\n    let alice_secret = 0x123456;\n    let bob_secret = 0x789ABC; // Bob's secret (Alice doesn't know this!)\n    \n    let alice_pubkey = pedersen_hash([alice_secret]);\n    let bob_pubkey = pedersen_hash([bob_secret]);\n    \n    let asset_id = 1;\n    let transfer_amount = 300;\n    \n    // Initial account states\n    let alice_account = Account::new(alice_pubkey, 1000, 5, asset_id);\n    let bob_old_account = Account::new(bob_pubkey, 200, 3, asset_id);\n    \n    // ===== MERKLE TREE SETUP =====\n    // Simplified: Alice's account is the root\n    let merkle_root = alice_account.commitment_hash();\n    let merkle_path: [Field; MERKLE_DEPTH] = [0; MERKLE_DEPTH];\n    let merkle_indices: [Field; MERKLE_DEPTH] = [0; MERKLE_DEPTH];\n    \n    // ===== INTERACTIVE PROTOCOL =====\n    // 1. Alice tells Bob she wants to send 300 tokens\n    // 2. Bob creates his new account state with his own secret nonce increment\n    // 3. Bob sends his new commitment to Alice\n    // 4. Alice creates proof using Bob's commitment\n    \n    // Bob creates his new account (Alice doesn't control this!)\n    let bob_new_account = bob_old_account.receive(transfer_amount);\n    let bob_new_commitment = bob_new_account.commitment_hash();\n    \n    // Alice creates her new account\n    let alice_new_account = alice_account.send(transfer_amount);\n    let alice_new_commitment = alice_new_account.commitment_hash();\n    \n    // Generate nullifier\n    let nullifier = Nullifier::new(alice_account.commitment_hash(), alice_secret);\n    \n    // ===== RUN THE TRANSFER =====\n    main(\n        merkle_root,                    // Public: Global state\n        nullifier.hash,                 // Public: Nullifier\n        alice_new_commitment,           // Public: Alice's new state\n        bob_new_commitment,             // Public: Bob's new state (from Bob!)\n        asset_id,                       // Public: Asset type\n        alice_account,                  // Private: Alice's current account\n        alice_secret,                   // Private: Alice's secret key\n        transfer_amount,                // Private: Transfer amount\n        bob_pubkey,                     // Private: Bob's public key\n        bob_old_account.balance,        // Private: Bob's old balance (Alice knows)\n        bob_old_account.nonce,          // Private: Bob's old nonce (Alice knows)\n        alice_new_account,              // Private: Alice's new account\n        merkle_path,                    // Private: Merkle proof\n        merkle_indices,                 // Private: Merkle proof directions\n    );\n    \n    // Verify final states\n    assert(alice_new_account.balance == 700); // 1000 - 300\n    assert(alice_new_account.nonce == 6);     // 5 + 1\n    assert(bob_new_account.balance == 500);   // 200 + 300\n    assert(bob_new_account.nonce == 4);       // 3 + 1\n}\n\n#[test(should_fail)]\nfn test_insufficient_balance() {\n    // Alice tries to send more than she has\n    let alice_secret = 0x123456;\n    let bob_secret = 0x789ABC;\n    \n    let alice_pubkey = pedersen_hash([alice_secret]);\n    let bob_pubkey = pedersen_hash([bob_secret]);\n    \n    let asset_id = 1;\n    let transfer_amount = 1500; // More than Alice has!\n    \n    let alice_account = Account::new(alice_pubkey, 1000, 5, asset_id);\n    let bob_old_account = Account::new(bob_pubkey, 200, 3, asset_id);\n    \n    let merkle_root = alice_account.commitment_hash();\n    let merkle_path: [Field; MERKLE_DEPTH] = [0; MERKLE_DEPTH];\n    let merkle_indices: [Field; MERKLE_DEPTH] = [0; MERKLE_DEPTH];\n    \n    let bob_new_account = bob_old_account.receive(transfer_amount);\n    let alice_new_account = alice_account.send(transfer_amount); // This will underflow!\n    \n    let nullifier = Nullifier::new(alice_account.commitment_hash(), alice_secret);\n    \n    // This should fail on assert(sender_account.balance >= transfer_amount)\n    main(\n        merkle_root,\n        nullifier.hash,\n        alice_new_account.commitment_hash(),\n        bob_new_account.commitment_hash(),\n        asset_id,\n        alice_account,\n        alice_secret,\n        transfer_amount,\n        bob_pubkey,\n        bob_old_account.balance,\n        bob_old_account.nonce,\n        alice_new_account,\n        merkle_path,\n        merkle_indices,\n    );\n}\n\n#[test(should_fail)]\nfn test_zero_transfer() {\n    // Zero value transfers should fail\n    let alice_secret = 0x123456;\n    let bob_secret = 0x789ABC;\n    \n    let alice_pubkey = pedersen_hash([alice_secret]);\n    let bob_pubkey = pedersen_hash([bob_secret]);\n    \n    let asset_id = 1;\n    let transfer_amount = 0; // Zero transfer should fail\n    \n    let alice_account = Account::new(alice_pubkey, 1000, 5, asset_id);\n    let bob_old_account = Account::new(bob_pubkey, 200, 3, asset_id);\n    \n    let merkle_root = alice_account.commitment_hash();\n    let merkle_path: [Field; MERKLE_DEPTH] = [0; MERKLE_DEPTH];\n    let merkle_indices: [Field; MERKLE_DEPTH] = [0; MERKLE_DEPTH];\n    \n    let bob_new_account = bob_old_account.receive(transfer_amount);\n    let alice_new_account = alice_account.send(transfer_amount);\n    \n    let nullifier = Nullifier::new(alice_account.commitment_hash(), alice_secret);\n    \n    // This should fail on assert(transfer_amount > 0)\n    main(\n        merkle_root,\n        nullifier.hash,\n        alice_new_account.commitment_hash(),\n        bob_new_account.commitment_hash(),\n        asset_id,\n        alice_account,\n        alice_secret,\n        transfer_amount,\n        bob_pubkey,\n        bob_old_account.balance,\n        bob_old_account.nonce,\n        alice_new_account,\n        merkle_path,\n        merkle_indices,\n    );\n}\n\n#[test(should_fail)]\nfn test_wrong_secret_key() {\n    // Alice tries to use wrong secret key\n    let alice_secret = 0x123456;\n    let wrong_secret = 0x999999;\n    let bob_secret = 0x789ABC;\n    \n    let alice_pubkey = pedersen_hash([alice_secret]);\n    let bob_pubkey = pedersen_hash([bob_secret]);\n    \n    let asset_id = 1;\n    let transfer_amount = 300;\n    \n    let alice_account = Account::new(alice_pubkey, 1000, 5, asset_id);\n    let bob_old_account = Account::new(bob_pubkey, 200, 3, asset_id);\n    \n    let merkle_root = alice_account.commitment_hash();\n    let merkle_path: [Field; MERKLE_DEPTH] = [0; MERKLE_DEPTH];\n    let merkle_indices: [Field; MERKLE_DEPTH] = [0; MERKLE_DEPTH];\n    \n    let bob_new_account = bob_old_account.receive(transfer_amount);\n    let alice_new_account = alice_account.send(transfer_amount);\n    \n    let nullifier = Nullifier::new(alice_account.commitment_hash(), wrong_secret);\n    \n    // This should fail on pubkey verification or nullifier verification\n    main(\n        merkle_root,\n        nullifier.hash,\n        alice_new_account.commitment_hash(),\n        bob_new_account.commitment_hash(),\n        asset_id,\n        alice_account,\n        wrong_secret, // Wrong secret!\n        transfer_amount,\n        bob_pubkey,\n        bob_old_account.balance,\n        bob_old_account.nonce,\n        alice_new_account,\n        merkle_path,\n        merkle_indices,\n    );\n}\n\n#[test(should_fail)]\nfn test_invalid_merkle_proof() {\n    // Alice tries to use invalid Merkle proof\n    let alice_secret = 0x123456;\n    let bob_secret = 0x789ABC;\n    \n    let alice_pubkey = pedersen_hash([alice_secret]);\n    let bob_pubkey = pedersen_hash([bob_secret]);\n    \n    let asset_id = 1;\n    let transfer_amount = 300;\n    \n    let alice_account = Account::new(alice_pubkey, 1000, 5, asset_id);\n    let bob_old_account = Account::new(bob_pubkey, 200, 3, asset_id);\n    \n    let fake_root = 0xDEADBEEF; // Wrong Merkle root!\n    let merkle_path: [Field; MERKLE_DEPTH] = [0; MERKLE_DEPTH];\n    let merkle_indices: [Field; MERKLE_DEPTH] = [0; MERKLE_DEPTH];\n    \n    let bob_new_account = bob_old_account.receive(transfer_amount);\n    let alice_new_account = alice_account.send(transfer_amount);\n    \n    let nullifier = Nullifier::new(alice_account.commitment_hash(), alice_secret);\n    \n    // This should fail on Merkle proof verification\n    main(\n        fake_root, // Wrong root!\n        nullifier.hash,\n        alice_new_account.commitment_hash(),\n        bob_new_account.commitment_hash(),\n        asset_id,\n        alice_account,\n        alice_secret,\n        transfer_amount,\n        bob_pubkey,\n        bob_old_account.balance,\n        bob_old_account.nonce,\n        alice_new_account,\n        merkle_path,\n        merkle_indices,\n    );\n}\n\n#[test]\nfn test_account_state_transitions() {\n    // Test various account operations work correctly\n    let secret = 12345;\n    let pubkey = pedersen_hash([secret]);\n    let asset_id = 1;\n    \n    // Create initial account\n    let account1 = Account::new(pubkey, 1000, 0, asset_id);\n    assert(account1.verify());\n    \n    // Send some tokens\n    let account2 = account1.send(300);\n    assert(account2.balance == 700);\n    assert(account2.nonce == 1);\n    assert(account2.verify());\n    \n    // Receive some tokens\n    let account3 = account2.receive(150);\n    assert(account3.balance == 850);\n    assert(account3.nonce == 2);\n    assert(account3.verify());\n    \n    // Multiple operations\n    let account4 = account3.send(50).receive(200).send(100);\n    assert(account4.balance == 900); // 850 - 50 + 200 - 100\n    assert(account4.nonce == 5);     // 2 + 3 operations\n    assert(account4.verify());\n    \n    // All commitments should be different\n    assert(account1.commitment_hash() != account2.commitment_hash());\n    assert(account2.commitment_hash() != account3.commitment_hash());\n    assert(account3.commitment_hash() != account4.commitment_hash());\n}","path":"/Users/abuusama/Desktop/private-starknet/circuits/account_system/src/main.nr"}},"names":["main"],"brillig_names":["decompose_hint","directive_invert","directive_integer_quotient"]}